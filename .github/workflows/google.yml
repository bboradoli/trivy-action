name: Build and Deploy to GKE

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_ID: ksh-pr-test
  GKE_CLUSTER: ksh-gke-cluster
  GKE_ZONE: asia-northeast3
  GAR_LOCATION: asia-northeast3 # TODO: update region of the Artifact Registry
  REPOSITORY: ksh-artifact-repo-gar # TODO: update to Artifact Registry docker repository
  DEPLOYMENT_NAME: helloweb
  IMAGE: hello-app
  GCP_KEY: ${{ secrets.GKE_GSA_KEY }}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    ## Setup gcloud CLI
    #- uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
    #  with:
    #    service_account_key: ${{ secrets.GKE_GSA_KEY }}
    #    project_id: ${{ secrets.GKE_PROJECT }}      
        
    - name: 'Setup gcloud CLI'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GKE_GSA_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: 'Default application'
      run: echo "$GCP_KEY" > ~/.config/gcloud/application_default_credentials.json

    - uses: docker/login-action@v2
      with:
        registry: asia-northeast3-docker.pkg.dev
        username: _json_key
        password: ${{ secrets.GKE_GSA_KEY }} 

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker
    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_GSA_KEY }}

    # Build the Docker image
    - name: Build
      run: |-
         docker build -t "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest" .
        #docker build \
        #  --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
        #  --build-arg GITHUB_SHA="$GITHUB_SHA" \
        #  --build-arg GITHUB_REF="$GITHUB_REF" \
        #  .

    - name: '######### Check Print ###########'
      run: echo "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest"

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        #image-ref: ${{ secrets.REPO_LOCATION }}-docker.pkg.dev/${{ secrets.REPO_PROJECT }}/${{ secrets.REPO_NM }}/${{ secrets.REPO_IMAGE }}:latest
        image-ref: "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest"
        format: 'table'
    #    exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'



    # Push the Docker image to Google Artifact Registry
    - name: Publish
      run: |-
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest"
        
    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize
    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        # replacing the image name in the k8s template
        ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide
